{"version":3,"sources":["App.tsx","funcRandomCounts.ts","reportWebVitals.ts","index.tsx"],"names":["timer","randomCounts","val","base","Math","random","putPattern","roundTo","floor","pow","int","toString","SPEAKER","voice","speechSynthesis","getVoices","find","name","speak","speaker","text","uttr","SpeechSynthesisUtterance","handleClick","script","clearTimeout","setTimeout","App","className","src","alt","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAOIA,E,+DC0CWC,EA7BM,WACnB,IACIC,EAEJ,OArBiB,WACjB,IAAMC,EAAcC,KAAKC,SACzB,OAAGF,EAAO,GACD,SAEJA,GAAQ,IAAOA,GAAQ,IACjB,WACCA,GAAQ,KAAQA,GAAQ,GACzB,WACCA,GAAQ,KAAQA,GAAQ,GACzB,WAEA,WAMYG,IAIrB,IAAK,SAECJ,EAAMK,IAAQH,KAAKI,MAAOJ,KAAKC,SAAWD,KAAKK,IAAK,GAD9C,IAC0DL,KAAKK,IAAK,GADpE,GAC6E,GACvF,MACF,IAAK,WACHP,EAAMG,IAAOK,IAAI,EAAG,KACpB,MACF,IAAK,WACHR,EAAMK,IAAQF,IAAOK,IAAI,IAAM,MAAS,GACxC,MACF,IAAK,WACHR,EAAMK,IAAQF,IAAOK,IAAI,IAAO,MAAa,GAC7C,MACF,IAAK,WACHR,EAAMK,IAAQF,IAAOK,IAAI,IAAW,OAAgB,GACpD,MACF,QACER,EAAMG,IAAOK,IAAI,EAAG,KAIxB,OAAOR,EAAIS,Y,eDrCPC,EACA,QADAA,EAEA,QAIFC,EAAQC,gBAAgBC,YAAYC,MAAK,SAASH,GACpD,OAAOA,EAAMI,OAASL,KAGxB,SAASM,EAAMC,EAAgBC,GAC7B,IAAMC,EAAO,IAAIC,yBAAyBF,IAG1CP,EAAQC,gBAAgBC,YAAYC,MAAK,SAASH,GAChD,OAAOA,EAAMI,OAASE,QAKtBE,EAAKR,MAAQA,GAEfC,gBAAgBI,MAAMG,GAGxB,IAAME,EAAc,WAClB,IAAMC,EAASvB,IACfiB,EAAMN,EAAYY,GAClBC,aAAazB,GACbA,EAAQ0B,YAAW,WACjBR,EAAMN,EAAYY,KAjCR,MA+DCG,MA1Bf,WAEE,OACE,qBAAKC,UAAU,aAAf,SACE,sBAAKA,UAAU,uCAAf,UACE,sBAAKA,UAAU,mGAAf,UACE,oBAAIA,UAAU,0BAAd,sBACA,mBAAGA,UAAU,UAAb,kGAIF,sBAAKA,UAAU,iHAAf,UACE,qBAAKA,UAAU,wDAAwDC,IAAI,mKAAmKC,IAAI,gBAElP,qBAAKF,UAAU,cAAf,SACE,wBACEA,UAAU,mGACVG,KAAK,SAASC,QAAST,EAFzB,iCE5CGU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.afff707d.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport randomCounts from './funcRandomCounts';\n\nimport './App.css';\n\nconst DELAY = 2000;\nlet timer:any;\n\nconst SPEAKER = {\n  en: 'Karen',\n  jp: 'Kyoko'\n}\n\n//「イギリス人風の声質」のvoiceオブジェクトを取得\nlet voice = speechSynthesis.getVoices().find(function(voice){\n  return voice.name === SPEAKER.en;\n});\n\nfunction speak(speaker:string, text:string){\n  const uttr = new SpeechSynthesisUtterance(text);\n  \n  // Need to call 2 times because of the API's issue\n  voice = speechSynthesis.getVoices().find(function(voice){\n    return voice.name === speaker;\n  });\n\n  \n  if(voice){\n    uttr.voice = voice;\n  }\n  speechSynthesis.speak(uttr);\n}\n\nconst handleClick = () => {\n  const script = randomCounts();\n  speak(SPEAKER.en, script);\n  clearTimeout(timer);\n  timer = setTimeout(() => {\n    speak(SPEAKER.jp, script)\n  }, DELAY);\n}\n\nfunction App() {\n\n  return (\n    <div className=\"App h-full\">\n      <div className=\"mx-5 mt-20 grid place-content-center\">\n        <div className=\"bg-gradient-to-r from-blue-400 to-indigo-500 rounded-2xl text-white p-8 text-center h-72 mx-auto\">\n          <h1 className=\"text-3xl mb-3 font-bold\">Count JP</h1>\n          <p className=\"text-lg\">\n            You can try to recognize numbers from English to Japanese by clicking the button!\n          </p>\n        </div>\n        <div className=\"bg-white py-8 px-8 text-center rounded-md shadow-lg transform -translate-y-20 sm:-translate-y-24 w-3/4 mx-auto\">\n          <img className=\"w-20 h-20 object-cover rounded-full mx-auto shadow-lg\" src=\"https://images.unsplash.com/photo-1611342799915-5dd9f1665d04?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\" alt=\"User avatar\" />\n          {/* <p className=\"capitalize text-xl mt-1\">essie walton</p> */}\n          <div className=\"mt-5 w-full\">\n            <button \n              className=\"rounded-md bg-gradient-to-r from-blue-400 to-indigo-500 text-xl text-white pt-3 pb-4 px-8 inline\"\n              type=\"button\" onClick={handleClick}\n            >Listten!</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import random from 'random';\nimport roundTo from 'round-to';\n\nconst putPattern = () => {\n  const base:number = Math.random();\n  if(base < 0.1){\n    return 'points';\n  } else {\n    if(base >= 0.1 && base <= 0.25){\n      return 'integer1';\n    } else if(base >= 0.26 && base <= 0.4){\n      return 'integer2';\n    } else if(base >= 0.41 && base <= 0.7){\n      return 'integer3';\n    } else {\n      return 'integer4';\n    }\n  }\n}\n\nconst randomCounts = () => {\n  const pattern:string = putPattern();\n  let val:number;\n\n  switch(pattern){\n    case 'points':\n      const n = 2;\n          val = roundTo(Math.floor( Math.random() * Math.pow( 10, n ) ) / Math.pow( 10, n ), 3);\n      break;\n    case 'integer1':\n      val = random.int(0, 100);\n      break;\n    case 'integer2':\n      val = roundTo(random.int(1000, 10000), -1);\n      break;\n    case 'integer3':\n      val = roundTo(random.int(10000, 100000000), -6);\n      break;\n    case 'integer4':\n      val = roundTo(random.int(100000000, 100000000000), -8);\n      break;\n    default:\n      val = random.int(0, 100);\n      break;\n  }\n  \n  return val.toString();\n}\n\nexport default randomCounts;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}